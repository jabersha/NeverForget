//
//  ItemViewController.swift
//  NeverForget
//
//  Created by Jaber Shamali on 26/06/22.
//  Copyright (c) 2022 Jabinho. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import CoreLocation

protocol ItemDisplayLogic{
//    func displaySomething(viewModel: Item.Something.ViewModel)
}

class ItemViewController: UIViewController, ItemDisplayLogic{
    var interactor: ItemBusinessLogic?
    var router: (NSObjectProtocol & ItemRoutingLogic & ItemDataPassing)?
    var locationManager:CLLocationManager!
    var itemView = ItemView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?){
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup(){
        let viewController = self
        let interactor = ItemInteractor()
        let presenter = ItemPresenter()
        let router = ItemRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        setupView()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        determineCurrentLocation()
    }
}

extension ItemViewController: CodeView{
    func buildHierarchy() {
        view.addSubview(itemView.mapsView)
        view.addSubview(itemView.table)
        view.addSubview(itemView.bottomView)
        view.addSubview(itemView.addBtn)
    }
    
    func configConstraints() {
        itemView.mapsView.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide)
            make.height.equalTo(250)
            make.right.left.equalToSuperview()
        }
        
        itemView.table.snp.makeConstraints { make in
            make.top.equalTo(itemView.mapsView.snp.bottom)
            make.right.left.equalToSuperview()
            make.bottom.equalTo(itemView.bottomView.snp.top)
        }
        
        itemView.bottomView.snp.makeConstraints { make in
            make.height.equalTo(60)
            make.left.right.bottom.equalToSuperview()
        }
        
        itemView.addBtn.snp.makeConstraints { make in
            make.height.width.equalTo(50)
            make.bottom.equalTo(view.safeAreaLayoutGuide)
            make.centerX.equalToSuperview()
        }
        
    }
    
    func additionalConfig() {
        itemView.table.delegate = self
        itemView.table.dataSource = self
        itemView.table.register(ItemCell.self, forCellReuseIdentifier: ItemCell.identifier)

        self.navigationItem.setHidesBackButton(true, animated: true)
        view.backgroundColor = .systemPink
        itemView.addBtn.backgroundColor = .systemMint
        itemView.bottomView.backgroundColor = .systemPink
        
    }
}

extension ItemViewController: UITableViewDelegate, UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: ItemCell.identifier, for: indexPath) as? ItemCell else {
            return UITableViewCell()
        }
        
        cell.itemLb.text = "Playstation 5"
        
        return cell
    }
    
    
}

extension ItemViewController: MKMapViewDelegate, CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let mUserLocation:CLLocation = locations[0] as CLLocation
        
        let center = CLLocationCoordinate2D(latitude: mUserLocation.coordinate.latitude, longitude: mUserLocation.coordinate.longitude)
        let mRegion = MKCoordinateRegion(center: center, span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01))
        
        itemView.mapsView.setRegion(mRegion, animated: true)
    }
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Error - locationManager: \(error.localizedDescription)")
    }
    //MARK:- Intance Methods
    
    func determineCurrentLocation() {
        locationManager = CLLocationManager()
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBest
        locationManager.requestAlwaysAuthorization()
        
        if CLLocationManager.locationServicesEnabled() {
            locationManager.startUpdatingLocation()
        }
    }
}
